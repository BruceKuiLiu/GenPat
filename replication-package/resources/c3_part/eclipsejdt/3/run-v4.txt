run cluster:3
PATTERN:
-		try {
-			String sourceA =
-				"public class A {\n" +
-				"	public static void main(String[] args) {\n" +
-				"		int i = 6;\n" +
-				"		if (i\n" +
-				"			< 0) {   	\n" +
-				"		   	System.out.println(i);\n" +
-				"		   }\n" +
-				"	}\n" +
-				"}";
-			compileAndDeploy(sourceA, "A");
-			IClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + "A.class", IClassFileReader.ALL);
-			IMethodInfo[] methodInfos = classFileReader.getMethodInfos();
-			assertEquals("wrong size", 2, methodInfos.length);
-			IMethodInfo methodInfo = methodInfos[1];
-			assertEquals("wrong name", "main", new String(methodInfo.getName()));
-			ICodeAttribute codeAttribute = methodInfo.getCodeAttribute();
-			assertNotNull("No code attribute", codeAttribute);
-			ILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();
-			assertNotNull("No code line number attribute", lineNumberAttribute);
-			int[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();
-			assertEquals("wrong size", 4, lineNumberTable.length);
-			assertEquals("wrong pc[0]", 0, lineNumberTable[0][0]);
-			assertEquals("wrong line[0]", 3, lineNumberTable[0][1]);
-			assertEquals("wrong pc[1]", 3, lineNumberTable[1][0]);
-			assertEquals("wrong line[1]", 4, lineNumberTable[1][1]);
-			assertEquals("wrong pc[2]", 7, lineNumberTable[2][0]);
-			assertEquals("wrong line[2]", 6, lineNumberTable[2][1]);
-			assertEquals("wrong pc[3]", 14, lineNumberTable[3][0]);
-			assertEquals("wrong line[3]", 8, lineNumberTable[3][1]);
-		} finally {
-			removeTempClass("A");
-		}
+		String source =
+			"public class A {\n" +
+			"	public static void main(String[] args) {\n" +
+			"		int i = 6;\n" +
+			"		if (i\n" +
+			"			< 0) {   	\n" +
+			"		   	System.out.println(i);\n" +
+			"		   }\n" +
+			"	}\n" +
+			"}";
+		String expectedOutput =
+			"/* \n" + 
+			" * Version (target 1.2) \n" + 
+			" * - magic: CAFEBABE\n" + 
+			" * - minor: 0\n" + 
+			" * - major: 46\n" + 
+			" */\n" + 
+			"// Compiled from A.java\n" + 
+			"public class A extends java.lang.Object {\n" + 
+			"  \n" + 
+			"  /*  Method descriptor  #6 ()V */\n" + 
+			"  public A();\n" + 
+			"    /* Stack: 1, Locals: 1 */\n" + 
+			"    Code attribute:\n" + 
+			"      0  aload_0\n" + 
+			"      1  invokespecial #9 <Constructor java.lang.Object()>\n" + 
+			"      4  return\n" + 
+			"\n" + 
+			"    Line number attribute:\n" + 
+			"      [pc: 0, line: 1]\n" + 
+			"    Local variable table attribute:\n" + 
+			"      [pc: 0, pc: 5] local: this index: 0 type: A\n" + 
+			"  \n" + 
+			"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\n" + 
+			"  public static void main(String[] args);\n" + 
+			"    /* Stack: 2, Locals: 2 */\n" + 
+			"    Code attribute:\n" + 
+			"       0  bipush 6\n" + 
+			"       2  istore_1\n" + 
+			"       3  iload_1\n" + 
+			"       4  ifge 14\n" + 
+			"       7  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\n" + 
+			"      10  iload_1\n" + 
+			"      11  invokevirtual #27 <Method java.io.PrintStream#println(int arg) void>\n" + 
+			"      14  return\n" + 
+			"\n" + 
+			"    Line number attribute:\n" + 
+			"      [pc: 0, line: 3]\n" + 
+			"      [pc: 3, line: 4]\n" + 
+			"      [pc: 7, line: 6]\n" + 
+			"      [pc: 14, line: 8]\n" + 
+			"    Local variable table attribute:\n" + 
+			"      [pc: 0, pc: 15] local: args index: 0 type: java/lang/String[]\n" + 
+			"      [pc: 3, pc: 15] local: i index: 1 type: int\n" + 
+			"  \n" + 
+			"}";
+		checkClassFile("A", source, expectedOutput);

TP, FP = 0,0
original_before=
public void test024(){
try{
String sourceA="public class A {\n"+"	public static void main(String[] args) {\n"+"		int i = 6;\n"+"		if (0\n"+"			> i) {   	\n"+"		   	System.out.println(i);\n"+"		   }\n"+"	}\n"+"}";
compileAndDeploy(sourceA,"A");
IClassFileReader classFileReader=ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY+File.separator+"A.class",IClassFileReader.ALL);
IMethodInfo[] methodInfos=classFileReader.getMethodInfos();
assertEquals("wrong size",2,methodInfos.length);
IMethodInfo methodInfo=methodInfos[1];
assertEquals("wrong name","main",new String(methodInfo.getName()));
ICodeAttribute codeAttribute=methodInfo.getCodeAttribute();
assertNotNull("No code attribute",codeAttribute);
ILineNumberAttribute lineNumberAttribute=codeAttribute.getLineNumberAttribute();
assertNotNull("No code line number attribute",lineNumberAttribute);
int[][] lineNumberTable=lineNumberAttribute.getLineNumberTable();
assertEquals("wrong size",4,lineNumberTable.length);
assertEquals("wrong pc[0]",0,lineNumberTable[0][0]);
assertEquals("wrong line[0]",3,lineNumberTable[0][1]);
assertEquals("wrong pc[1]",3,lineNumberTable[1][0]);
assertEquals("wrong line[1]",5,lineNumberTable[1][1]);
assertEquals("wrong pc[2]",7,lineNumberTable[2][0]);
assertEquals("wrong line[2]",6,lineNumberTable[2][1]);
assertEquals("wrong pc[3]",14,lineNumberTable[3][0]);
assertEquals("wrong line[3]",8,lineNumberTable[3][1]);
}finally{
removeTempClass("A");
}
}
